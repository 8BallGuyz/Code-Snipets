using UnityEngine;

public class ScriptSwitcher : MonoBehaviour
{
    // References to the scripts you want to switch between
    public MonoBehaviour AR;
    public MonoBehaviour Sniper;
    public KeyCode KeyBindAR;
    public KeyCode KeyBindSniper;

    public Sprite ARsprite;
    public Sprite Snipersprite;

    // Array to hold the scripts
    private MonoBehaviour[] scripts;

    // Index of the currently active script
    private int currentIndex = 0;

    void Start()
    {
        // Populate the scripts array
        scripts = new MonoBehaviour[] { AR, Sniper };

        // Ensure only the first script is active initially
        ActivateScript(currentIndex);
    }

    void Update()
    {
        // Listen for key presses and switch scripts accordingly
        if (Input.GetKeyDown(KeyBindAR))
        {
            SwitchToScript(0);  // Switch to scriptA
            GetComponent<SpriteRenderer>().sprite = ARsprite;
        }
        else if (Input.GetKeyDown(KeyBindSniper))
        {
            SwitchToScript(1);  // Switch to scriptB
            GetComponent<SpriteRenderer>().sprite = Snipersprite;
        }
    }

    void SwitchToScript(int index)
    {
        if (index >= 0 && index < scripts.Length)
        {
            currentIndex = index;
            ActivateScript(currentIndex);
        }
    }

    void ActivateScript(int index)
    {
        // Disable all scripts
        foreach (var script in scripts)
        {
            if (script != null)
            {
                script.enabled = false;
            }
        }

        // Enable the selected script
        if (scripts[index] != null)
        {
            scripts[index].enabled = true;
            Debug.Log($"Activated: {scripts[index].GetType().Name}");
        }
        else
        {
            Debug.LogWarning($"Script at index {index} is not assigned.");
        }
    }
}


__________________________________________________________________________________________________________________________________________


Step 1: Create the Script

In Unity, go to Assets > Create > C# Script and name it player_collider.
Open the script and paste the provided code.

Step 2: Attach the Script to the Player Object

Select the Player GameObject in the Hierarchy.
Drag and drop the player_collider script onto the Player GameObject.

Step 3: Set Up Tags

Ensure that the Enemy GameObjects are tagged as "Enemy".
Select each Enemy prefab or object.
In the Inspector, set its Tag to "Enemy" (or create a new tag if it doesn’t exist).

Step 4: Set Up the ScoreManager

Make sure you have a ScoreManager script in your project that handles the player’s lives.
Ensure it has a public static instance and a DecrementLives() method.
ScoreManager.instance should point to the active ScoreManager.
DecrementLives() should handle reducing the player’s lives.

Step 5: Add Rigidbody2D and Collider2D Components

Make sure both the Player GameObject and Enemy GameObjects have Rigidbody2D and Collider2D components attached.
At least one of them must have its Rigidbody2D's "Body Type" set to Dynamic for collision detection to work.

Step 6: Test Your Setup

Run the game and allow the Player to collide with an Enemy object.
Each time a collision occurs, the ScoreManager should reduce the player’s lives.

How It Works:

The script uses the OnCollisionEnter2D method, which detects collisions between two Collider2D components.
When a collision occurs, it checks if the colliding object is tagged as "Enemy".
If the condition is true, the ScoreManager's DecrementLives() method is called, reducing the player's lives.

Optional Improvements:

Add visual or sound effects when the player loses a life.
Display a Game Over screen when lives reach zero.
Implement invincibility frames to prevent rapid life loss from multiple collisions.

