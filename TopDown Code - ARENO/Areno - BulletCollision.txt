
public class collision : MonoBehaviour
{
    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("bullet"))
        {
            Destroy(collision.gameObject); // Destroy the bullet on impact
        }
    }
}


__________________________________________________________________________________________________________________________________________


Step 1: Create the Script

In Unity, go to Assets > Create > C# Script and name it collision.
Open the script and paste the provided code.

Step 2: Attach the Script to the Target Object

Select the GameObject that should detect collisions (e.g., an enemy or obstacle).
Drag and drop the collision script onto this GameObject.

Step 3: Set Up Tags

Ensure that the GameObjects acting as bullets are tagged as "bullet".
Select the bullet prefab or object.
In the Inspector, set its Tag to "bullet" (or create a new tag if it doesnâ€™t exist).

Step 4: Add Rigidbody2D and Collider2D Components

Make sure both the bullet and the target GameObject have Rigidbody2D and Collider2D components attached.
At least one of them must have its Rigidbody2D's "Body Type" set to Dynamic for collision detection to work.

Step 5: Test Your Setup

Run the game and fire bullets at the target object.
When a bullet collides with the object, it will be destroyed on impact.

How It Works:

The script uses the OnCollisionEnter2D method, which detects collisions between two Collider2D components.
When a collision occurs, it checks if the colliding object has the tag "bullet".
If the condition is true, the bullet object is destroyed using Destroy(collision.gameObject).

Optional Improvements:

Add effects or sound on collision (e.g., explosion animation or sound effect).
Destroy the target object as well, if needed.